-- Comments in this file use the Haskell syntax:
-- A "--" comments the rest of the line.
-- A set of {- ... -} comments out a group of lines.

-- This defines some aliases, to make the reports look nicer:
{-
aliases (
	--"sun-awt-X11-XFramePeer"  -> "java",
	--"___nforschung"           -> "ahnenforschung",
	--"Pidgin"                  -> "pidgin"
	)
-}

condition reader = current window $program
  =~ m!Preview|mupdf-gl|zathura!
in { -- A rule that probably everybody wants. Being inactive for over a minute
     -- causes this sample to be ignored by default.
     $idle > 60
     && ! (current window $program == "mpv"
           && current window $title =~ m!^Playing - !
          )
     && ! ($reader && $idle < 300)
       ==> tag inactive,

     -- Simple rule that just tags the current program
     condition game = current window $program
       =~ m!(Osmos|Spiral Knights|Kingdoms and Castles)!
     in { ! ($game || $reader || current window $program =~ m!(?:Wire)!)
            ==> tag Program:$current.program,

          current window $title =~ m!Wire!
            ==> tag Wire:Pomo,

          $game ==> tag Game:$1,

          $reader && current window $title =~ m!([^/]+\.(pdf|epub|cbz|cbr))!
            ==> tag Read:$1,

        },
   },

-- A rule that matches on a list of strings
--current window $program == ["Navigator","galeon"] ==> tag Web,

-- Another simple rule, just tags the current desktop (a.k.a. workspace)
tag Desktop:$desktop,

-- I'd like to know what evolution folders I'm working in. But when sending a
-- mail, the window title only contains the (not very helpful) subject. So I do
-- not tag necessarily by the active window title, but the title that contains
-- the folder
{-
current window $program == "evolution" &&
any window ($program == "evolution" && $title =~ /^(.*) \([0-9]+/)
  ==> tag Evo-Folder:$1,
-}

current window $title =~ m!toonn/src/([^/]+)!
|| current window $title =~ m!vim .*src/([^/]+)!
  ==> tag Project:$1,

current window $program == "Firefox"
  ==> {
    (current window $title =~ m!(?:subreddit of | r/)(ranger)!
    || current window $title =~ m!ranger/(ranger)!)
      ==> tag Project:$1,
    
    current window $title =~ m!· ([^/·]+) / ([^/·]+) · GitLab!
      ==> tag Project:$1__$2,

    current window $title =~ m!([^/ ]+)/([^/@: ]+)(?:$|@|:)!
      ==> tag Project:$1__$2,

    current window $title =~ m!Duolingo.* ([^ ]+)$!
      ==> tag Duolingo:$1,

    current window $title =~ m!(matrix|mastodon)!
      ==> tag Fediverse:$1,

    current window $title =~ m!(facebook|twitter|instagram|tumblr|pinterest)!
      ==> tag Social:$1
  },

current window $title =~ m!(?:Y|y)ou(?:T|t)u(?:\.)?be!
  ==> tag YouTube,

current window $program == "mpv"
&& current window $title =~ m!watch/([^/]+)!
  ==> tag Watch:$1,



-- Out of curiosity: what percentage of my time am I actually coding Haskell?
{-
current window ($program == "gvim" && $title =~ /^[^ ]+\.hs \(/ )
  ==> tag Editing-Haskell,
-}

{-
-- Example of time-related rules. I do not use these myself.

-- To be able to match on the time of day, I introduce tags for that as well.
-- $time evaluates to local time.
$time >=  2:00 && $time <  8:00 ==> tag time-of-day:night,
$time >=  8:00 && $time < 12:00 ==> tag time-of-day:morning,
$time >= 12:00 && $time < 14:00 ==> tag time-of-day:lunchtime,
$time >= 14:00 && $time < 18:00 ==> tag time-of-day:afternoon,
$time >= 18:00 && $time < 22:00 ==> tag time-of-day:evening,
$time >= 22:00 || $time <  2:00 ==> tag time-of-day:late-evening,

-- This tag always refers to the last 24h
$sampleage <= 24:00 ==> tag last-day,

-- To categorize by calendar periods (months, weeks, or arbitrary periods),
-- I use $date variable, and some auxiliary functions. All these functions
-- evaluate dates in local time. Set TZ environment variable if you need
-- statistics in a different time zone.

-- You can compare dates:
$date >= 2001-01-01 ==> tag this_century,
-- You have to write them in YYYY-MM-DD format, else they will not be recognized.

-- “format $date” produces a string with the date in ISO 8601 format
-- (YYYY-MM-DD), it may be compared with strings. For example, to match
-- everything on and after a particular date I can use
format $date =~ ".*-03-19"  ==> tag period:on_a_special_day,
-- but note that this is a rather expensive operation and will slow down your
-- data processing considerably.

-- “day of month $date” gives the day of month (1..31),
-- “day of week $date” gives a sequence number of the day of week
-- (1..7, Monday is 1):
(day of month $date == 13) && (day of week $date == 5) ==> tag day:friday_13,

-- “month $date” gives a month number (1..12), “year $date” gives a year:
month $date == 1 ==> tag month:January,
month $date == 2 ==> tag month:February,
year $date == 2010 ==> tag year:2010,

-- “$now” evaluates to the current time
day of month $now == day of month $date ==> tag current-day,
month $now == month $date ==> tag current-month,
year $now == year $date ==> tag current-year,
-}
